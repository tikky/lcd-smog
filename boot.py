from machine import I2C, Pin, Timerfrom esp8266_i2c_lcd import I2cLcd#load variables from config fileimport ujsonjson_file = open('config.json')cfg = ujson.load(json_file)#set variablesWIFI_SSID = cfg['WIFI_SSID']WIFI_PASS = cfg['WIFI_PASS']DEFAULT_I2C_ADDR = int(cfg['DEFAULT_I2C_ADDR']) #0x27DEFAULT_SCL_PIN = int(cfg['DEFAULT_SCL_PIN']) #5 #22DEFAULT_SLA_PIN = int(cfg['DEFAULT_SLA_PIN']) #4 #21LCD_LINES = int(cfg['LCD_LINES']) #4LCD_CHARS = int(cfg['LCD_CHARS']) #20i2c = I2C(scl=Pin(DEFAULT_SCL_PIN), sda=Pin(DEFAULT_SLA_PIN), freq=400000) lcd = I2cLcd(i2c, DEFAULT_I2C_ADDR, LCD_LINES, LCD_CHARS)lcd.clear()lcd.putstr("START")def do_connect():    import network, time    wlan = network.WLAN(network.STA_IF)    wlan.active(True)    if not wlan.isconnected():        print('connecting to network...')        lcd.move_to(0, 0)        lcd.putstr("connecting WiFI")        lcd.move_to(0, 1)        lcd.putstr(WIFI_SSID)        wlan.connect(WIFI_SSID, WIFI_PASS)        while not wlan.isconnected():            #pass            print(".", end="")            time.sleep(1)    print('network config:', wlan.ifconfig())print ('Start boot.py')do_connect()from ntptime import settimeimport utimesettime()print ("Aktualny czas:")print (utime.localtime())print ('End boot.py')print ('...')